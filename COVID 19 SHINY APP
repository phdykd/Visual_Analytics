library(shiny)
library(knitr)
library(scales)
library(ggspatial)
library(sf)
library(readr)
library(viridis)
library(plotly)
library(tmap)
library(here)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(hrbrthemes)
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(stringr)
library(rgdal)
library(lubridate)
library(ggmap)
library(maps)
library(mapdata)
library(rworldmap)
library(rgeos)
library(reshape2)
library(colorspace)
library(colorblindr)
library(cowplot)
library(ggrepel)
library(tictoc)
library(pryr)
library(sf)
library(maps)
library(gganimate)
library(magick)
library(janitor)
library(shinyjs)
library(treemap)
library(d3treeR)
library(plotly)
library(shinythemes)
library(RColorBrewer)

# rmdfiles <- c("COVID_19_Demir.rmd")
# sapply(rmdfiles, knit, quiet = T)


### US Confirmed Cases


##### {r confirmed usa, warning=F,message=F}
cf<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv", stringsAsFactors = FALSE) 


##### {r 49 states filter}
cf1<-filter(cf, Province_State != 'Alaska' & Province_State != 'American Samoa' & Province_State != 'Diamond Princess' & Province_State != 'Grand Princess' & Province_State !='Guam' & Province_State !='Hawaii' & Province_State !='Northern Mariana Islands' & Province_State !='Puerto Rico' & Province_State !='Virgin Islands')



##### {r 49 states, message=FALSE, warning=FALSE}
cf1<-as.data.frame(cf1)

names(cf1)[names(cf1) == "X12.12.20"] <- "Confirmed"
names(cf1)[names(cf1) == "Province_State"] <- "State"

cf1<-subset(cf1, select = c(State,Confirmed))

cf1$State = tolower(cf1$State)

cf2<-cf1%>%
    group_by(State)



##### {r last date sum}
cf2 %>%
    summarise(Confirmed = sum(Confirmed))



##### {r Confirmed}

cf2$State<-reorder(cf2$State,-cf2$Confirmed)



##### {r cf2 join us state map}
us <- st_as_sf(maps::map(database = "state",plot=F,fill=T))


##### {r cf3, message=FALSE, warning=FALSE}
cf3<-cf2 %>%
    summarise(Confirmed = sum(Confirmed))

##### {r sf_cf3 }
sf_cf3<-
    us %>% 
    full_join(cf3, by = c("ID" = "State"))





### US Death Cases

##### {r deaths usa, warning=F,message=F}
dt<- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv", stringsAsFactors = FALSE) 

##### {r dt 49 states filter}
dt1<-filter(dt, Province_State != 'Alaska' & Province_State != 'American Samoa' & Province_State != 'Diamond Princess' & Province_State != 'Grand Princess' & Province_State !='Guam' & Province_State !='Hawaii' & Province_State !='Northern Mariana Islands' & Province_State !='Puerto Rico' & Province_State !='Virgin Islands')



##### {r dt 49 states, message=FALSE, warning=FALSE}
dt1<-as.data.frame(dt1)

names(dt1)[names(dt1) == "X12.12.20"] <- "Death"
names(dt1)[names(dt1) == "Province_State"] <- "State"

dt1<-subset(dt1, select = c(State,Death))

dt1$State = tolower(dt1$State)

dt2<-dt1%>%
    group_by(State)


##### {r last date sum death}
dt2 %>%
    summarise(Death = sum(Death))

##### {r death}

dt2$State<-reorder(dt2$State,-dt2$Death)




##### {r dt2 join us state map}
us <- st_as_sf(maps::map(database = "state",plot=F,fill=T))

##### {r dt3, message=FALSE, warning=FALSE}
dt3<-dt2 %>%
    summarise(Death = sum(Death))

##### {r sf_dt3 }
sf_dt3<-
    us %>% 
    full_join(dt3, by = c("ID" = "State"))



##### {r cf2 dt2 left join}

jus<-left_join(cf3, dt3, by='State')


### Global confirmed cases


##### {r confirmed global, warning=F,message=F}
cw<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", stringsAsFactors = FALSE)%>%
    dplyr::mutate(Country.Region = ifelse(Country.Region == "North Macedonia", "Macedonia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Taiwan*", "Taiwan", Country.Region),
                  Country.Region = ifelse(Country.Region == "US", "United States of America", Country.Region),
                  Country.Region = ifelse(Country.Region == "Korea, South", "South Korea", Country.Region),
                  Country.Region = ifelse(Country.Region == "Serbia", "Republic of Serbia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Czechia", "Czech Republic", Country.Region),
                  Country.Region = ifelse(Country.Region == "West Bank and Gaza", "West Bank", Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Brazzaville)", "Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Kinshasa)", "Democratic Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Cote d'Ivoire", "Cote dIvoire", Country.Region),
                  Country.Region = trimws( Country.Region))

##### {r filter countries}
cw<-filter(cw, Country.Region != 'Bahamas' & Country.Region != 'Burma' & Country.Region != 'Cabo Verde' & Country.Region != 'Cote dIvoire' & Country.Region != 'Diamond Princess' & Country.Region != 'Eswatini' & Country.Region != 'Guinea-Bissau' & Country.Region != 'Holy See' & Country.Region != 'MS Zaandam' & Country.Region != 'Timor-Leste')

#####{r global, message=FALSE, warning=FALSE}

cw1<-as.data.frame(cw)

names(cw1)[names(cw1) == "X12.12.20"] <- "Confirmed"
names(cw1)[names(cw1) == "Country.Region"] <- "Country"

cw1<-subset(cw1, select = c(Country,Confirmed))

cw2<-cw1%>%
    group_by(Country)

##### {r cw3}
cw3<- cw2 %>%
    dplyr::summarise(total = sum(Confirmed), .groups = "drop")
cw3

#####{r last date sum cw3, message=FALSE, warning=FALSE}
names(cw3)[names(cw3) == "total"] <- "Confirmed"

cw4<-cw3 %>%
    group_by(Country)%>%
    summarise(Confirmed = sum(Confirmed))

##### {r global high risk countries confirmed over 100K}
cw5<-filter(cw4, Confirmed >= 200000)

cw5$Country<-reorder(cw5$Country,-cw5$Confirmed)



##### {r global low risk  countries Confirmed lower 5K}
cw6<-filter(cw4, Confirmed <= 5000)

cw6$Country<-reorder(cw6$Country,-cw6$Confirmed)



##### {r sf world map}
sf_world <- 
    st_as_sf(rworldmap::getMap(resolution = "low"))%>%
    st_transform(crs = 4326) %>% 
    dplyr::select(GEOUNIT)


##### {r cw4 and sf_world left join}

names(sf_world)[names(sf_world) == "GEOUNIT"] <- "Country"

##### {r sf_cw4}
sf_cw4<-
    sf_world %>% 
    full_join(cw4, by = c("Country" = "Country"))%>%
    na.omit()





### Global Death Cases

##### {r death global, warning=F,message=F}
dw<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv", stringsAsFactors = FALSE)%>%
    dplyr::mutate(Country.Region = ifelse(Country.Region == "North Macedonia", "Macedonia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Taiwan*", "Taiwan", Country.Region),
                  Country.Region = ifelse(Country.Region == "US", "United States of America", Country.Region),
                  Country.Region = ifelse(Country.Region == "Korea, South", "South Korea", Country.Region),
                  Country.Region = ifelse(Country.Region == "Serbia", "Republic of Serbia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Czechia", "Czech Republic", Country.Region),
                  Country.Region = ifelse(Country.Region == "West Bank and Gaza", "West Bank", Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Brazzaville)", "Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Kinshasa)", "Democratic Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Cote d'Ivoire", "Cote dIvoire", Country.Region),
                  Country.Region = trimws( Country.Region))




##### {r filter countries death global}
dw<-filter(dw, Country.Region != 'Bahamas' & Country.Region != 'Burma' & Country.Region != 'Cabo Verde' & Country.Region != 'Cote dIvoire' & Country.Region != 'Diamond Princess' & Country.Region != 'Eswatini' & Country.Region != 'Guinea-Bissau' & Country.Region != 'Holy See' & Country.Region != 'MS Zaandam' & Country.Region != 'Timor-Leste')

##### {r death global dw1, message=FALSE, warning=FALSE}

dw1<-as.data.frame(dw)

names(dw1)[names(dw1) == "X12.12.20"] <- "Death"
names(dw1)[names(dw1) == "Country.Region"] <- "Country"

dw1<-subset(dw1, select = c(Country,Death))

dw2<-dw1%>%
    group_by(Country)

##### {r dw3}
dw3<- dw2 %>%
    dplyr::summarise(total = sum(Death), .groups = "drop")
dw3

##### {r last date sum dw4 dw3, message=FALSE, warning=FALSE}
names(dw3)[names(dw3) == "total"] <- "Death"

dw4<-dw3 %>%
    group_by(Country)%>%
    summarise(Death = sum(Death))

##### {r global high risk countries death over 2500}
dw5<-filter(dw4, Death >= 2500)

dw5$Country<-reorder(dw5$Country,-dw5$Death)


##### {r global low risk  countries death lower 100}
dw6<-filter(dw4, Death <= 100)

dw6$Country<-reorder(dw6$Country,-dw6$Death)


##### {r sf_dw4 }
sf_dw4<-
    sf_world %>% 
    full_join(dw4, by = c("Country" = "Country"))%>%
    na.omit()



### Global Recovered Cases


##### {r recovered global, warning=F,message=F}
rw<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv", stringsAsFactors = FALSE)%>%
    dplyr::mutate(Country.Region = ifelse(Country.Region == "North Macedonia", "Macedonia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Taiwan*", "Taiwan", Country.Region),
                  Country.Region = ifelse(Country.Region == "US", "United States of America", Country.Region),
                  Country.Region = ifelse(Country.Region == "Korea, South", "South Korea", Country.Region),
                  Country.Region = ifelse(Country.Region == "Serbia", "Republic of Serbia", Country.Region),
                  Country.Region = ifelse(Country.Region == "Czechia", "Czech Republic", Country.Region),
                  Country.Region = ifelse(Country.Region == "West Bank and Gaza", "West Bank", Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Brazzaville)", "Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Congo (Kinshasa)", "Democratic Republic of the Congo",
                                          Country.Region),
                  Country.Region = ifelse(Country.Region == "Cote d'Ivoire", "Cote dIvoire", Country.Region),
                  Country.Region = trimws( Country.Region))


##### {r filter countries recovered global}
rw<-filter(rw, Country.Region != 'Bahamas' & Country.Region != 'Burma' & Country.Region != 'Cabo Verde' & Country.Region != 'Cote dIvoire' & Country.Region != 'Diamond Princess' & Country.Region != 'Eswatini' & Country.Region != 'Guinea-Bissau' & Country.Region != 'Holy See' & Country.Region != 'MS Zaandam' & Country.Region != 'Timor-Leste')



##### {r recovered global rw1, message=FALSE, warning=FALSE}

rw1<-as.data.frame(rw)

names(rw1)[names(rw1) == "X12.12.20"] <- "Recovered"
names(rw1)[names(rw1) == "Country.Region"] <- "Country"

rw1<-subset(rw1, select = c(Country,Recovered))

rw2<-rw1%>%
    group_by(Country)

##### {r rw3}
rw3<- rw2 %>%
    dplyr::summarise(total = sum(Recovered), .groups = "drop")
rw3

##### {r last date sum dw3, message=FALSE, warning=FALSE}
names(rw3)[names(rw3) == "total"] <- "Recovered"

rw4<-rw3 %>%
    group_by(Country)%>%
    summarise(Recovered = sum(Recovered))


##### {r cw4 dw4 rw4 left join}

jw<-left_join(cw4, dw4, by='Country') %>%
    left_join(rw4, by='Country') 

##### {r global jw}
jw$Country<-reorder(jw$Country,-jw$Confirmed)
jw1<-filter(jw, Confirmed >= 1000000)




##### {r global low recovered less than 2500}
rw5<-filter(rw4, Recovered <= 2500)

rw5$Country<-reorder(rw5$Country,-rw5$Recovered)



##### {r global high recovered more than 100000}
rw6<-filter(rw4, Recovered >= 100000)

rw6$Country<-reorder(rw6$Country,-rw6$Recovered)


##### {r sf_rw4 }
sf_rw4<-
    sf_world %>% 
    full_join(rw4, by = c("Country" = "Country"))%>%
    na.omit()



### Tree Confirm Distribution 


##### {r us confirmed treemap}

cc_us <- treemap(cf3, index="State",vSize="Confirmed" ,vColor="State",border.col=c("black","white"), palette = "RdYlBu", title="Confirmed",
                 fontsize.title=16, fontsize.labels = 8)

##### {r us confirmed treemap interactive}

cc_us1<-d3tree2(cc_us,rootname = "US Confirmed COVID-19")
cc_us1

#####{r us death treemap}

dc_us <- treemap(dt3, index="State",vSize="Death" ,vColor="State",border.col=c("black","white"), palette = "RdPu", title="Death",
                 fontsize.title=16, fontsize.labels = 8)

#####{r us death treemap interactive}

dc_us1<-d3tree2(dc_us,rootname = "US Death COVID-19")
dc_us1

##### {r global confirmed treemap}

cc_global <- treemap(cw4, index="Country",vSize="Confirmed" ,vColor="Country",border.col=c("black","white"), palette = "RdYlBu", title="Confirmed",
                     fontsize.title=16, fontsize.labels = 8)
##### {r global recovered treemap interactive}

cc_global1<-d3tree2(cc_global, rootname = "Confirmed COVID-19")
cc_global1

##### {r high global confirmed treemap}

cc_global2 <- treemap(cw5, index="Country",vSize="Confirmed" ,vColor="Country",border.col=c("black","white"), palette = "RdYlBu", title="High Confirmed, Case>0.2M",
                      fontsize.title=16, fontsize.labels = 8)

##### {r high global confirmed treemap interactive}

cc_global3<-d3tree2(cc_global2, rootname = "High Confirmed COVID-19, Case>0.2M")
cc_global3

##### {r low global confirmed treemap}

cc_global4 <- treemap(cw6, index="Country",vSize="Confirmed" ,vColor="Country",border.col=c("black","white"), palette = "RdYlBu", title="Low Confirmed,Case<5k",
                      fontsize.title=16, fontsize.labels = 8)
##### {r low global confirmed treemap interactive}

cc_global5<-d3tree2(cc_global4, rootname = "Low Confirmed COVID-19, Case<5k")
cc_global5

##### {r global death treemap}

dc_global <- treemap(dw4, index="Country",vSize="Death" ,vColor="Country",border.col=c("black","white"), palette = "RdPu", title="Death",
                     fontsize.title=16, fontsize.labels = 8)

##### {r global death treemap interactive}

dc_global1<-d3tree2(dc_global,rootname = "Death COVID-19")
dc_global1

##### {r global high death treemap}

dc_global2 <- treemap(dw5, index="Country",vSize="Death" ,vColor="Country",border.col=c("black","white"), palette = "RdPu", title="High Death, Case>2.5k",
                      fontsize.title=16, fontsize.labels = 8)
##### {r global high death treemap interactive}

dc_global3<-d3tree2(dc_global2,rootname = "High Death COVID-19,Case>2.5k")
dc_global3

##### {r global low death treemap}

dc_global4 <- treemap(dw6, index="Country",vSize="Death" ,vColor="Country",border.col=c("black","white"), palette = "RdPu", title="Low Death,Case<100",
                      fontsize.title=16, fontsize.labels = 8)

##### {r global low death treemap interactive}

dc_global5<-d3tree2(dc_global4,rootname = "Low Death COVID-19,Case<100")
dc_global5

##### {r global recovered treemap}

rc_global <- treemap(rw4, index="Country",vSize="Recovered" ,vColor="State",border.col=c("black","white"), palette = "Greens", title="Recovered",
                     fontsize.title=16, fontsize.labels = 8)
##### {r global1 recovered treemap interactive}

rc_global1<-d3tree2(rc_global, rootname = "Recovered COVID-19")
rc_global1

##### {r global high recovered treemap}

rc_global2 <- treemap(rw6, index="Country",vSize="Recovered" ,vColor="State",border.col=c("black","white"), palette = "Greens", title="High Recovered,Case>0.1M",
                      fontsize.title=16, fontsize.labels = 8)
##### {r global high recovered treemap interactive}

rc_global3<-d3tree2(rc_global2, rootname = "High Recovered COVID-19,Case>0.1M")
rc_global3

##### {r global low recovered treemap}

rc_global4 <- treemap(rw5, index="Country",vSize="Recovered" ,vColor="State",border.col=c("black","white"), palette = "Greens", title="Low Recovered,Case<2.5k",
                      fontsize.title=16, fontsize.labels = 8)

##### {r global low recovered treemap interactive}

rc_global5<-d3tree2(rc_global4, rootname = " Low Recovered COVID-19,Case<2.5k")
rc_global5



## Recovered to Death Ratio World


##### {r Death to Recovered Ratio World}

jw$Recovered_Death_Ratio<-jw$Recovered/jw$Death

jw<-within(jw,Recovered_Death_Ratio<-jw$Recovered/jw$Death)

##### {r sf_rdr Recovered_Death_Ratio}
sf_rdr<-
    sf_world %>% 
    full_join(jw, by = c("Country" = "Country"))%>%
    na.omit()




## Recovered to Confirmed Ratio World



##### {r Recovered to Confirmed Ratio World}

jw$Recovered_Confirmed_Ratio<-jw$Recovered/jw$Confirmed

jw<-within(jw,Recovered_Confirmed_Ratio<-jw$Recovered/jw$Confirmed)

#####  {r sf_rdr Recovered_Death_Ratio}
sf_rcr<-
    sf_world %>% 
    full_join(jw, by = c("Country" = "Country"))%>%
    na.omit()




## Death to Confirmed Ratio World



##### {r Death to Confirmed Ratio World}

jw$Death_Confirmed_Ratio<-jw$Death/jw$Confirmed

jw<-within(jw,Death_Confirmed_Ratio<-jw$Death/jw$Confirmed)

#####  {r sf_dcc Death_Confirmed_Ratio}
sf_dcc<-
    sf_world %>% 
    full_join(jw, by = c("Country" = "Country"))%>%
    na.omit()





## US Additional


## Death to Confirmed Ratio US



##### {r Confirmed to Death Ratio US}

jus$Confirmed_Death_Ratio<-jus$Confirmed/jus$Death

jus<-within(jus,Confirmed_Death_Ratio<-jus$Confirmed/jus$Death)

#####  {r sf_jus}
sf_jus<-
    us %>% 
    full_join(jus, by = c("ID" = "State"))







# Define UI for application
ui <- fluidPage(
    titlePanel("COVID_19_Guide"),
    tabsetPanel(
        tabPanel("World Overall", fluid=TRUE,
                 sidebarLayout(
                     sidebarPanel(selectInput("conf",label = "Select Country", multiple = TRUE,
                                              choices = unique(jw$Country),selected=c("Yemen","Norway"))),
                     mainPanel(plotOutput('gcd'),plotlyOutput('jw3'))
                 )
        ),
        
        tabPanel("World Case Ratio", fluid=TRUE,
                 sidebarLayout(
                     sidebarPanel(selectInput("conf1",label = "Select Country", multiple = TRUE,
                                              choices = unique(jw$Country),selected=c('Norway',"Singapore"))),
                     mainPanel(plotlyOutput('jw10'),plotlyOutput('rcr'), plotlyOutput('dcc'))
                 )
        ),
        
        
        
        tabPanel("World Map Triple Case", plotlyOutput("wdc"), plotlyOutput("wrc"),plotlyOutput("wcc")),
        
        tabPanel("US Overall", fluid = TRUE,
                 sidebarLayout(
                     sidebarPanel(selectInput("joinus", label = "Select State", multiple = TRUE, 
                                              choices = unique(jus$State),selected=c("utah","new york"))),
                     mainPanel(plotOutput('usg'), plotlyOutput('jst'))
                 )
        ),
        
        tabPanel("US Case Ratio", fluid=TRUE,
                 sidebarLayout(
                     sidebarPanel(selectInput("joinus1",label = "Select State", multiple = TRUE,
                                              choices = unique(jus$State),selected=c("utah","new york"))),
                     mainPanel(plotOutput('usg1'),plotlyOutput('cdc'))
                 )
        ),
        
        
        tabPanel("US Map Triple Case", plotlyOutput("usc"),plotlyOutput("usd"),plotlyOutput('cdrus')),
        
        tabPanel("World Treemap High Low Confirmed Case", d3tree2Output("ccgh", width = "100%", height = "400px"),hr(), d3tree2Output("ccgl", width = "100%", height = "400px")),
        
        tabPanel("Supplemental Analysis", plotlyOutput("ghc"),plotlyOutput("glc"), plotlyOutput("ghd"),plotlyOutput("gld"),plotlyOutput("hrc"),plotlyOutput("lrc"),plotlyOutput("cp2"))
        
        
    ))


# Define server logic

#### World Overall

server <- function(input, output) {
    selected4 <- reactive(jw %>% filter(Country %in% input$conf))
    output$jw3 <- renderPlotly({
        plot_ly(selected4(), x = selected4()$Country, y = selected4()$Confirmed, type='bar', name = 'Confirmed') %>%
            add_trace(y = ~Death, name = 'Death') %>% 
            add_trace(y = ~Recovered, name = 'Recovered') %>% 
            layout(yaxis = list(title = ''), barmode = 'stack')
        
    })
    
    output$gcd <- renderPlot({
        t_global_cd<-tm_shape(sf_rdr)+
            tm_polygons('Confirmed',id='Country', palette='YlGnBu', legend.hist = FALSE, legend.show=TRUE) +
            tm_bubbles("Death", "red", border.col = "black", border.lwd=1, 
                       size.lim = c(0, 4e5), sizes.legend = c(4e2,4e3,4e5),
                       title.size="Death")+
            tm_text("Country", size="Recovered", scale=1, root=1, size.lowerbound = .3, 
                    bg.color="white", bg.alpha = .01, 
                    auto.placement = 1, legend.size.show = FALSE)+
            tm_legend(outside=TRUE)+
            tm_layout(legend.text.size =0.7,
                      legend.title.size =0.7,
                      legend.width =2)
        t_global_cd})
    
    
    #### World Case Ratio
    
    selected10 <- reactive(jw %>% filter(Country %in% input$conf1))
    output$jw10 <- renderPlotly({
        plot_ly(selected10(), x = selected10()$Country, y = selected10()$Recovered_Confirmed_Ratio, type='bar', name = 'Recovered Confirmed ratio') %>%
            add_trace(y = ~Death_Confirmed_Ratio, name = 'Death Confirmed ratio') %>% 
            layout(yaxis = list(title = ''), barmode = 'stack')
        
    })
    
    
    output$rcr<-
        renderPlotly({
            rcr<-ggplot(sf_rcr)+
                geom_sf(aes(fill=Recovered_Confirmed_Ratio,label=Country))+
                scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                       scale = 1*100,
                                                                       big.mark = ",")(x)})+labs(title="")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+
                theme(axis.text.x = element_blank(),
                      axis.text.y = element_blank(),
                      axis.ticks = element_blank(),
                      rect = element_blank())
            
            plotly_rcr<-ggplotly(rcr)
            plotly_rcr})
    
    
    output$dcc<-
        renderPlotly({
            dcc<-ggplot(sf_dcc)+
                geom_sf(aes(fill=Death_Confirmed_Ratio,label=Country))+
                scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                       scale = 1*100,
                                                                       big.mark = ",")(x)})+labs(title="")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+
                theme(axis.text.x = element_blank(),
                      axis.text.y = element_blank(),
                      axis.ticks = element_blank(),
                      rect = element_blank())
            
            plotly_dcc<-ggplotly(dcc)
            plotly_dcc})
    
    
    #### World Map Triple Case   
    
    output$wcc <- renderPlotly({
        print(
            ggplotly(
                ggplot(sf_cw4)+
                    geom_sf(aes(fill=Confirmed,label=Country))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1/1000000,
                                                                           suffix = "M",
                                                                           big.mark = ",")(x)})+labs(title="Confirmed Case")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
            ))
    })
    
    
    output$wdc <- renderPlotly({
        
        print(
            ggplotly(
                ggplot(sf_dw4)+
                    geom_sf(aes(fill=Death,label=Country))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1/1000,
                                                                           suffix = "k",
                                                                           big.mark = ",")(x)})+labs(title="Death Case")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
                
            ))  
        
    })
    
    
    output$wrc <- renderPlotly({
        print(
            ggplotly(
                ggplot(sf_rw4)+
                    geom_sf(aes(fill=Recovered,label=Country))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1/1000000,
                                                                           suffix = "M",
                                                                           big.mark = ",")(x)})+labs(title="Recovered Case")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
            ))
    })
    
    
    
    #### US Overall
    
    
    output$usg <- renderPlot({
        t_us_cd<-tm_shape(sf_jus)+
            tm_polygons('Confirmed',id='ID', palette='YlGnBu', legend.hist = FALSE, legend.show=TRUE) +
            tm_bubbles("Death", "red", border.col = "black", border.lwd=1, 
                       size.lim = c(0, 4e4), sizes.legend = c(4e2,4e3,4e4),
                       title.size="Death")+
            tm_text("ID", size="Death", scale=1, root=4, size.lowerbound = .3, 
                    bg.color="white", bg.alpha = .01, 
                    auto.placement = 1, legend.size.show = FALSE)+
            tm_legend(outside=TRUE)+
            tm_layout(legend.text.size =0.7,
                      legend.title.size = 0.7,
                      legend.width =2)
        t_us_cd})
    
    
    
    selected5 <- reactive(jus %>% filter(State %in% input$joinus))
    output$jst <- renderPlotly({
        plot_ly(selected5(), x = selected5()$State, y = selected5()$Confirmed, type='bar', name = 'Confirmed') %>%
            add_trace(y = ~Death, name = 'Death')%>% 
            layout(yaxis = list(title = ''), barmode = 'stack')
        
    })  
    
    #### US Case Ratio 
    output$usg1 <- renderPlot({
        t_us_cd_ratio<-tm_shape(sf_jus)+
            tm_polygons('Confirmed_Death_Ratio',id='ID', palette='YlGnBu', legend.hist = FALSE, legend.show=TRUE) +
            tm_bubbles("Death", "red", border.col = "black", border.lwd=1, 
                       size.lim = c(0, 3e6), sizes.legend = c(4e2,4e3,4e4),
                       title.size="Death")+
            tm_text("ID", size="Confirmed", scale=1, root=5, size.lowerbound = .3, 
                    bg.color="white", bg.alpha = .01, 
                    auto.placement = 1, legend.size.show = FALSE)+
            tm_legend(outside=TRUE)+
            tm_layout(legend.text.size =0.7,
                      legend.title.size = 0.7,
                      legend.width =2)
        
        t_us_cd_ratio})
    
    
    
    selected11 <- reactive(jus %>% filter(State %in% input$joinus1))
    output$cdc <- renderPlotly({
        plot_ly(selected11(), x = selected11()$State, y = selected11()$Confirmed_Death_Ratio, type='bar',name = 'Confirmed/Death')%>%
            layout(yaxis = list(title = ''), barmode = 'stack')
        
    })
    
    #### US Map Triple Case    
    
    
    output$usc <- renderPlotly({
        print(
            ggplotly(
                ggplot(sf_cf3)+
                    geom_sf(aes(fill=Confirmed,label=ID))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1/1000,
                                                                           suffix = "k",
                                                                           big.mark = ",")(x)})+ labs(title="Confirmed Case")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
            )) 
        
    })
    
    output$usd <- renderPlotly({
        
        print(
            ggplotly(
                ggplot(sf_dt3)+
                    geom_sf(aes(fill=Death,label=ID))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1/1000,
                                                                           suffix = "k",
                                                                           big.mark = ",")(x)})+labs(title="Death Case")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
            ))
        
    })
    
    
    output$cdrus <- renderPlotly({
        
        print(
            ggplotly(
                ggplot(sf_jus)+
                    geom_sf(aes(fill=Confirmed_Death_Ratio,label=ID))+
                    scale_fill_viridis(labels=function (x) { number_format(accuracy = 1,
                                                                           scale = 1,
                                                                           big.mark = ",")(x)})+labs(title="Confirmed/Death")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    theme(axis.text.x = element_blank(),
                          axis.text.y = element_blank(),
                          axis.ticks = element_blank(),
                          rect = element_blank())
                
            ))
        
    })
    
    
    
    
    
    #### World Treemap High Low Confirmed Case
    
    
    output$ccgh <- renderD3tree2({
        
        cc_global2 <- treemap(cw5, index="Country",vSize="Confirmed" ,vColor="Country",border.col=c("black","white"), palette = "RdYlBu", title="High Confirmed, Case>0.2M",
                              fontsize.title=16, fontsize.labels = 8)
        d3tree2(cc_global2)
        
    })
    
    
    
    output$ccgl <- renderD3tree2({
        
        cc_global4 <- treemap(cw6, index="Country",vSize="Confirmed" ,vColor="Country",border.col=c("black","white"), palette = "RdYlBu", title="Low Confirmed,Case<5k",
                              fontsize.title=16, fontsize.labels = 8)
        d3tree2(cc_global4)
    })
    
    
    #### Supllemental Analysis
    
    output$ghc <- renderPlotly({
        print(
            ggplotly(
                ggplot(cw5,aes(x = Country, y = Confirmed,fill=Country))+
                    geom_bar(stat='identity',width=0.7)+
                    theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                    theme(legend.position = "none")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.minor = element_blank(), 
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))+
                    ggtitle("High, Case>0.2M") +
                    scale_y_continuous(labels = function (x) { number_format(accuracy = 1,
                                                                             scale = 1/1000000,
                                                                             suffix = "M",
                                                                             big.mark = ",")(x)})
                
            ))
    })
    
    
    
    
    
    
    output$glc <- renderPlotly({
        print(ggplotly(
            ggplot(cw6,aes(x = Country, y = Confirmed,fill=Country))+
                geom_bar(stat='identity',width=0.7)+
                theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                theme(legend.position = "none")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+ 
                ggtitle("Low, Case<5k") +
                scale_y_continuous(labels = function (x) { number_format(accuracy = 1,
                                                                         scale = 1/1000,
                                                                         suffix = "k",
                                                                         big.mark = ",")(x)})
            
        ))
    })
    
    
    
    
    
    output$ghd <- renderPlotly({
        print(ggplotly(
            ggplot(dw5,aes(x = Country, y = Death,fill=Country))+
                geom_bar(stat='identity',width=0.7)+
                theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                theme(legend.position = "none")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+
                ggtitle("High, Case>2.5k") +
                scale_y_continuous(labels = function (x) { number_format(accuracy = 1,
                                                                         scale = 1/1000,
                                                                         suffix = "k",
                                                                         big.mark = ",")(x)})
            
        ))
    })
    
    
    
    output$gld <- renderPlotly({
        print(ggplotly(
            ggplot(dw6,aes(x = Country, y = Death,fill=Country))+
                geom_bar(stat='identity',width=0.7)+
                theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                theme(legend.position = "none")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+
                ggtitle("Low, Case<100")
            
            
            
        ))
    })
    
    
    
    output$hrc <- 
        renderPlotly({
            print(
                ggplotly(ggplot(rw6,aes(x = Country, y = Recovered,fill=Country))+
                             geom_bar(stat='identity',width=0.7)+
                             theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                             theme(legend.position = "none")+
                             theme(panel.background = element_rect(fill = "transparent",colour = NA),
                                   panel.grid.minor = element_blank(), 
                                   panel.grid.major = element_blank(),
                                   plot.background = element_rect(fill = "transparent",colour = NA))+
                             ggtitle("High,Case>0.1M") +
                             scale_y_continuous(labels = function (x) { number_format(accuracy = 1,
                                                                                      scale = 1/1000000,
                                                                                      suffix = "M",
                                                                                      big.mark = ",")(x)})
                ))
        })
    
    
    output$lrc <- renderPlotly({
        print(ggplotly(
            ggplot(rw5,aes(x = Country, y = Recovered,fill=Country))+
                geom_bar(stat='identity',width=0.7)+
                theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))+
                theme(legend.position = "none")+
                theme(panel.background = element_rect(fill = "transparent",colour = NA),
                      panel.grid.minor = element_blank(), 
                      panel.grid.major = element_blank(),
                      plot.background = element_rect(fill = "transparent",colour = NA))+
                ggtitle("Low, Case<2.5k")
            
            
        ))
    })
    
    
    
    
    
    
    
    output$cp2 <- renderPlotly({
        
        print(
            ggplotly(
                ggplot(jus,aes(x = Death, y = Confirmed,fill=State))+
                    geom_point()+
                    scale_x_continuous(breaks=seq(0,5e4,2000),labels = function (x) { number_format(accuracy = 1,scale = 1/1000,
                                                                                                    suffix = "k",
                                                                                                    big.mark = ",")(x)})+
                    scale_y_continuous(breaks=seq(0,2e6,200000),
                                       labels = function (y) { number_format(accuracy = 1,scale = 1/1000,
                                                                             suffix = "k",
                                                                             big.mark = ",")(y)})+
                    theme(legend.position = "none")+
                    theme(panel.background = element_rect(fill = "transparent",colour = NA),
                          panel.grid.major = element_blank(),
                          plot.background = element_rect(fill = "transparent",colour = NA))
                
                
            ))
        
    })
    
    
}

# Run the application 
shinyApp(ui = ui, server = server)


