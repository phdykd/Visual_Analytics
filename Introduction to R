---
title: "problem-set-1-demir"
author: "Yusuf Kemal Demir;Ph.D."
date: "9/29/2020"
output:
  html_document:
    theme: united
    toc: yes
    toc_depth: 2
  word_document:
    toc: yes
    toc_depth: '2'
  pdf_document:
    toc: yes
    toc_depth: '2'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Visual Analytics
## Part 1: Installation
## Task 1

Answer the following questions about RMarkdown from the short lessons

## Details

- Who did you collaborate with: Alone
- Approximately how much time did you spend on this problem set: 2-3 hours.
- What, if anything, gave you the most trouble: Language used in Code 4 was not clear. Knitting.

### Instructions

For this problem set, you'll have three possible things to do.

- "### Question #" / "xxxxx" = Write your response to each question by replacing the "xxxx. 1-2 sentences is fine.

- "### Code #" = Write R code in the chunk corresponding to the instructions.

For this problem set, there are **15 questions** and **10 code** parts. If you get one wrong, it will be -3 points. 

Additional points will be deducted for problems with the formatting as outlined by the problem set 1 instructions (e.g., do not provide .html output, put data into data folder, etc.).

### Question 1

- What three (3) characters start and end the YAML information for an RMarkdown file?

### Answer 1

1- Code chunks to run. R code chunks surrounded by ``` s
2- Text to display. Text mixed with simple text formatting
3- YAML metadata to guide the R Markdown build process. YAML header surrounded by --- s

### Question 2

- What does the code chunk parameter `echo = FALSE` do?

### Answer 2

'echo=False' prevents code, but not the results from appearing in the finished file. This is useful way to embed figures.

### Question 3

- How do you change the output type for an RMarkdown file?

### Answer 3

Set the output_format argument of render to render my .Rmd file into any of R Markdown'supported formats. For example, below render 1-example.Rmd to a  Microsoft Word document.

### library(rmarkdown)
### render("1-example.Rmd", output_format = "word_document")


## Task 2: Creating baseline plot

### Code 1

Load the `tidyverse` package.

### Code 1 Answer

```{r install_load tidyverse, message=F, warning=F}
# install.packages('tidyverse',repos="http://cran.us.r-project.org")
library(tidyverse)
library(ggplot2)

```

### Question 4

- What packages are loaded when you call `tidyverse`?

### Answer 4
```{r tidyverse packages}
tidyverse_packages()
```
v ggplot2 3.3.2     v purrr   0.3.4
v tibble  3.0.3     v dplyr   1.0.2
v tidyr   1.1.2     v stringr 1.4.0
v readr   1.3.1     v forcats 0.5.0

***

### Code 2 

Read in the `corrupt.csv` file and assign it to `corrupt`.

### Code 2 Answer

```{r load-data-1}
corrupt<-read.csv(file='data/corrupt.csv')
head(corrupt)
```

***

### Code 3

Run the `glimpse()` function on the data to explore the column formats.

### Code 3 Answer

```{r glimpse}
glimpse(corrupt)

```

***

### Question 5

- How many rows (observations) and columns (variables) does the data frame include?

### Answer 5

#### Way 5_1

```{r dim}
dim(corrupt)
```
#### Way 5_2

Rows (observation): 704
Columns (variables):5

#### Way 5_3

```{r nrow ncol}
nrow(corrupt)
ncol(corrupt)
```
#### Way 5_4

```{r summary}
summary(corrupt)
```

***

However, it's not clear if there are duplicated records by year (i.e., this is panel data (record and time oriented)).

### Code 4

Run the `count()` function on `corrupt` and use `year` as the 2nd parameter. This will count how many records by each unique category in `year` (that is, each year)

### Code 4 Answer

#### Way 4_1
```{r count}
corrupt%>%
  group_by(year)%>%
  summarise(count=n())
```

#### Way 4_2

```{r tibble year count}
corrupt%>%as.tibble()%>%count(year)
```

***

### Question 6

- How many different years does the dataset include?

There are 4 different years (2012, 2013, 2014, 2015)

### Answer 6

```{r unique year}
unique(corrupt$year)
```

***

For simplicity, let's only keep 2015 records.

```{r filter-2015}
corrupt <- corrupt %>%filter(year == 2015) %>%
na.omit()
corrupt
```

Let's revise our existing `region` field. This will help us later on.

```{r region}

corrupt <- corrupt %>%
mutate(region = case_when(
region == "Middle East and North Africa" ~ "Middle East\nand North Africa",
region == "Europe and Central Asia" ~ "Europe and\nCentral Asia",
region == "Sub Saharan Africa" ~ "Sub-Saharan\nAfrica",
TRUE ~ region))

```

Let's now see how many countries we have for each region.

### Code 5

Using `dplyr` and piping (`%>%`), count the number of countries by region and assign it to the dataframe `region_count`. After running it, print it to the console by simply writing the name of the data frame.

### Code 5 Answer

```{r region-count-1}
region_count<-corrupt%>%
  group_by(region)%>%
  summarise(count=n())
region_count
```

***

### Question 7

- How many total countries are in the "Asia Pacific" region?

### Answer 7

Based on the above solution, it is 21.


***

### Code 6

Create a scatterplot with the dataframe `corrupt` in which `cpi` is on the x axis, `hdi` is on the y axis, and the color of the points is `region`:


### Code 6 Answer

```{r species-count-2}
ggplot(data = corrupt)+
  geom_point(mapping = aes(x=cpi, y=hdi, colour=region))
```

***

### Question 8

### Answer 8

- What are three problems with this graph (or ways you could improve this graph)?

1. The values of cpi and hdi are rounded so the points appear on a grid and some points overlap each other. This problem is known as overplotting. We can avoid this gridding by setting the position adjustment to “jitter”. 
position = "jitter" adds a small amount of random noise to each point. This spreads the points out because no two points are likely to receive the same amount of random noise.

```{r jitter, message=F, warning=F}
ggplot(data = corrupt)+
geom_point(mapping = aes(x=cpi, y=hdi, colour=region),position='jitter')
```


2. We can also use the same variable (region) for both shape and color

```{r shape,message=F, warning=F}
ggplot(data = corrupt)+
geom_point(mapping = aes(x=cpi, y=hdi, colour=region, shape=region),position='jitter')
```


3-We can use the smooth geom, a smooth line fitted to the region data.


```{r line smooth, message=F, warning=F}
ggplot(data = corrupt)+
geom_smooth (mapping = aes(x=cpi, y=hdi, color=region))
```

4- We can represent it usign facet wrap.

```{r facet wrap, message=F, warning=F}
ggplot(corrupt) +
  aes(x = cpi, 
      y = hdi,
      color = region) +
  geom_line(
    aes(group = region),
    color = "grey75"
  ) +
  geom_point(size = 0.25) +
  geom_smooth() + 
  scale_x_continuous(breaks = 
    seq(0, 100, 15)
  ) +  
  facet_wrap(~ region) +
  guides(color = FALSE)
```



5- We can use world map.


***

Now, let's modify our points.

First, let's reshape each point.

### Code 7

Within your `geom_point` function, add in the following fixed parameters: 

1. **size** to 2.5

2. **alpha** to 0.5

3. **shape** to 21

hint: since these three values are fixed, should the be inside or outside the aesthetics (`aes()`) function?

### Code 7 Answer

Size and alpha inside, shape outside.

```{r graph-1}
ggplot(data=corrupt)+
  geom_point(mapping = aes(x=cpi,y=hdi, color=region, size=2.5, alpha=0.5), shape=21)
```

***

### Question 9

- What does the `alpha` parameter do?

### Answer 9

Most geoms have an "alpha" parameter. Legal alpha values are any numbers from 0 (transparent) to 1 (opaque). The default alpha value usually is 1.To set the alpha to a constant value, use the alpha geom parameter (e.g., geom_point(data=d, mapping=aes(x=x, y=y), alpha=0.5) sets the alpha of all points in the layer to 0.5.


***

The plot is too transparent. The issue is the parameter `color` encodes the color of the border, not the color of the point.

That's where we'll need the `fill` parameter.

### Code 8

Put these two parameters explicitly in the `aes()` function of the `geom_point()`:

1. `color = region`

2. `fill = region`

Also, make sure to remove any mention of color or fill in the `aes()` of your main `ggplot()` function.

### Code 8 Answer

```{r graph-2}
ggplot(corrupt,aes(x=cpi,y=hdi,size=2.5,alpha=0.5),shape=21)+
  geom_point(mapping=aes(color=region,fill=region))


```



***

Last, let's temporarily save this graph as an object `g`. We can use the same `<-` (gets arrow) assignment operator. This will enable us to view the object or we can use it to build additional layers (Task 2).


### Code 9

Assign the ggplot from the previous part to `g` and then run `g` on its within the chunk.


### Code 9 Answer

```{r assign-g}
g<-ggplot(corrupt,aes(x=cpi,y=hdi,size=2.5,alpha=0.5),shape=21)+
  geom_point(mapping=aes(color=region,fill=region))
g
```

***

## Part 2: Re-designing

In this part, you'll add additional layers to our plot to re-design it.

This part is much more complicated, so your job will be easier: 

1. Remove the `eval=F` parameter from each chunk to run each chunk when `knit` your output.

2. Answer questions on interpreting what's going on.

For this, we'll use the same `g` object you created in the last chunk and slowly add more layers to the plot.

Before starting, we'll need two packages: `cowplot` and `colorspace`. You can install `colorspace` from CRAN (remember how to?). For `cowplot`, you need the most recent version which is on GitHub.

Installing packages from GitHub is relatively straight-forward. But you need an additional package: `devtools`. You can then run the line below to install it.

### Code 10

Install `cowplot` and `colorspace` and call these libraries. Also, remove the `eval=F` parameter from each chunk to run each chunk when `knit` your output. (hint: you can do this for all parts via Edit > Replace and Find or CTRL + F)

### Code 10 Answer

```{r install colorspace packages,warning=F,message=F}
# install.packages('colorscale',repos="http://cran.us.r-project.org")
library(colorspace)
```

```{r install devtools, warning=F,message=F}
# install.packages('devtools')
library(devtools)
```

```{r install cowplot,warning=F,message=F}
# devtools::install_github("wilkelab/cowplot")
```

```{r libraries cowplot,warning=F,message=F}

library(cowplot) 

```

***

### Question 10

- What does the parameters `warning=F` and `message=F` do within the code chunk?

### Answer 10

message = FALSE prevents messages that are generated by code from appearing in the finished file.

warning = FALSE prevents warnings that are generated by code from appearing in the finished.

***

#### Import unique theme and font size

Modifying themes are very common in ggplot. There are a range of packages to change plot themes like [`ggtheme`](https://ggplot2.tidyverse.org/reference/ggtheme.html).

For this plot, we'll use a theme built within the `cowplot` package that is a minimal background with a horizontal grid.

```{r import-theme}
g <- g +
  cowplot::theme_minimal_hgrid(12, rel_small = 1) 

g
```

### Question 11

- What does the `cowplot::` pre-fix for `theme_minimal_hgrid()` mean? When would it be necessary?

### Answer 11

theme_minimal_hgrid is minimal_horizontal grid theme, which only draws horizontal grid lines  without axis lines.

package 'dplyr' successfully unpacked and MD5 sums checked.

After package installation, the package is installed, but it isn't loaded into memory. If you are going to be using the cowplot functions frequently, you will want to actually load the package into memory. Otherwise you have to preface your functions with double-colons: cowplot::theme(). Who wants to remember that every time?


***

#### Modify color scheme

Next, let's modify the color scheme. Colors can be represented by [hex colors](https://www.color-hex.com/).

Sometimes, color palettes come in as R packages (e.g., [`RColorBrewer`](https://cran.r-project.org/web/packages/RColorBrewer/index.html)). However, for this plot we'll manually load up the colors.


```{r modify-color, message = FALSE}
# Okabe Ito colors
region_cols <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#999999")

g <- g +
  scale_fill_manual(values = region_cols) 

g
```


Alternative Modify color scheme

{r install colorblindr packages,warning=F,message=F}
Alternative solution
remotes::install_github("clauswilke/colorblindr")

{r install colorblindr library,  message = FALSE}
library(colorblindr)

Okabe Ito colors via colorblindr
g<-g+scale_fill_OkabeIto()
g


#### Darken colors by 30%

We can also darken the color scheme automatically through `colorspace`'s `darken()` function. 

```{r darken-color}
g<-g+
  scale_color_manual(values=colorspace::darken(region_cols,0.3))
g
```


#### Add smoothing line.

Let's now overlay a basic regression, using the `geom_smooth()` function.

For this, we'll make the function a log transformation of x.


```{r smooth}
g<-g+
  geom_smooth(
    aes(color='y~log(x)',fill='y~log(x)'),
    method = 'lm', formula = y~log(x),se=FALSE,fullrange=TRUE)
g
```


### Question 12

- What would be the difference in the plot if our smoothed function was `y~x` instead of `y~log(x)`?

### Answer 12
In many situations, the relationship between x and y is non-linear. In order to simplify the underlying model, we can transform or convert either x or y or both to result in a more linear relationship. There are many common transformations such as logarithmic and reciprocal. Including higher order terms on x may also help to linearity the relationship between x and y. 


```{r g1 smooth}
g1<-g+
  geom_smooth(
    aes(color='y~log(x)',fill='y~log(x)'),
    method = 'lm', formula = y~x,se=FALSE,fullrange=TRUE)
g1
```

***

#### Set x and y scales, move legend on top.

Let's now modify our scales, add scale labels, and modify the legend.

```{r set-scales}

g<-g+
  scale_x_continuous(
    name='Corruption Perception Index, 2015 (100=least corrupt)',
    limits = c(10,95),
    breaks = c(20,40,60,80,100),
    expand=c(0,0))+
  scale_y_continuous(
    name='Human Development Index, 2015\n(1.0=most developed)',
    limits = c(0.3,1.05),
    breaks=c(0.2,0.4,0.6,0.8,1.0),
    expand=c(0,0))+
  theme(legend.position = 'top',
        legend.justification = 'right',
        legend.text = element_text(size=9),
        legend.box.spacing = unit(0,'pt'))+
guides(fill=guide_legend(
    nrow = 1,
    override.aes = list(
      linetype=c(rep(0,5),1),
      shape=c(rep(21,5),NA))))
  
g

```


#### Highlight select countries

Last, let's add labels to highlight the countries.

We can use the `ggrepel` package that includes the `geom_text_repel()` function that makes sure not to overlap labels.


```{r highlight-busy}
# install.packages("ggrepel")
library(ggrepel)

# don't assign this to g
# if you do, then simply recreate g by running the "Run All Chunks Above" button

g2<-g+
  geom_text_repel(
    aes(label=country),
    color='black',
    size=9/.pt,
    point.padding=0.1,
    box.padding=.6,
    min.segment.length=0,
    seed=7654)
g2
```


Obviously, this is too busy. We have too many labels. 

Let's instead create a vector of countries we want to plot. We can the add in a new column that has the country name only if we want to plot it and nothing ("") otherwise.


```{r highlight}
country_highlight <- c("Germany", "Norway", "United States", "Greece", "Singapore", "Rwanda", "Russia", "Venezuela", "Sudan", "Iraq", "Ghana", "Niger", "Chad", "Kuwait", "Qatar", "Myanmar", "Nepal", "Chile", "Argentina", "Japan", "China")

corrupt<-corrupt%>%
  mutate(
    label=if_else (country %in% country_highlight, country, ""))

# wow: %+%
# https://stackoverflow.com/questions/29336964/changing-the-dataset-of-a-ggplot-object

g <- g %+% 
  corrupt +
  geom_text_repel(
    aes(label = label),
    color = "black",
    size = 9/.pt, # font size 9 pt
    point.padding = 0.1,
    box.padding = .6,
    min.segment.length = 0,
    seed = 7654) 

g
```

### Question 13

- What do you think the `%+%` operator does (see the StackOverflow link)? Why is it necessary in this context?

### Answer 13

1- Add components to a plot
2- Concatenate character vectors

***

#### Save as a pdf file
```{r save-plot}
g+ggsave('corrupt.pdf', width=8, height=5)

```

#### Better size for corrupt.pdf

```{r save-plot-resize}
g + ggsave("corrupt.pdf", width = 10, height = 5)
```

You now have a pdf saved as this plot. By setting the width and height, it'll make your life so much easier if you need to reproduce this plot (very likely).

### Question 14

- From this graph, how would you interpret countries that are above the regression line versus countries that are below?

### Answer 14

```{r sqrt}
fit.RP<-lm(hdi~cpi,data=corrupt)
summary(fit.RP)
```
1- There is a cluster formation under the line especially for Sub-Saharan Africa region.

2- Sub-Saharan Africa region seems to be dominant region that causes low R^2 and and high SSE.

3- Countries far away from the regression line have bigger sample error. It seems that countries below the regression line have high sample error.

4- Countries above regression line have smaller sample error since they are closer to the regression line.

5- Majority of Americas and almost all of the Europe and Central Asia countries have smaller sample error and are prone to enhance the regression (by increasing the R^2). 

6- Rather then forming cluster as observed with countries below the regression line, there is a kind of linear spread with the countries above the line.

***

### Question 15

 - What role does region have in the relationship between Corruption (Perception) and HDI?

### Answer 15

1- Sub-Saharan Africa region has the lowest human development index, whereas Europe and Central Asia seem to have the highest human development index.

2- Most corrupted region is Sub-Saharan Africa, whereas prevalence of corruption is lowest in Europe and Central Asia.

3- Although, very very few Europe and Central Asia countries (2) have significant corruption, it seems that they also have more than 0.6 human development index. Maybe they do corruption for development of "selected group" in their countries. Since it is not possible to have reliable data in corrupted countries, their human development index data could be fake.

4- Except from Sub-Saharan Africa region, most of the other countries have less SSE, and are close to the regression line.

5- Americas have human development index between 0.6 to 0.8.

6- If corruption can be slowed down in Sub-Saharan Africa region, it's expected to have better human development index.

7-  In order to yield a better linearity (ideal condition),Higher the human development index lower the corruption should be attained. In ideal condition, the cpi, hdi should be 100, 1.0, respectively. 

8-Europe and Central Asia has most significant linear data overall.

```{r tinytex, message=F, warning=F}
# install.packages('tinytex')
# tinytex::install_tinytex()
library(tinytex)
```
***
